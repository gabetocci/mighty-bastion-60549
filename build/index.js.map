{"version":3,"sources":["../index.js"],"names":["cool","require","express","path","PORT","process","env","Pool","pool","connectionString","DATABASE_URL","ssl","use","static","join","__dirname","set","get","req","res","render","connect","client","query","result","results","rows","release","console","error","send","rec","showTimes","listen","log","times","TIMES","i"],"mappings":";;;;AAAA,IAAMA,OAAOC,QAAQ,kBAAR,CAAb;AACA,IAAMC,UAAUD,QAAQ,SAAR,CAAhB;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,IAAMG,OAAOC,QAAQC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;;eACiBH,QAAQ,IAAR,C;IAATM,I,YAAAA,I;;AACR,IAAMC,OAAO,IAAID,IAAJ,CAAS;AACpBE,oBAAkBJ,QAAQC,GAAR,CAAYI,YADV;AAEpBC,OAAK;AAFe,CAAT,CAAb;;AAKAT,UACGU,GADH,CACOV,QAAQW,MAAR,CAAeV,KAAKW,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CADP,EAEGC,GAFH,CAEO,OAFP,EAEgBb,KAAKW,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAFhB,EAGGC,GAHH,CAGO,aAHP,EAGsB,KAHtB,EAIGC,GAJH,CAIO,GAJP,EAIY,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcA,IAAIC,MAAJ,CAAW,aAAX,CAAd;AAAA,CAJZ,EAKGH,GALH,CAKO,KALP;AAAA,qEAKc,iBAAOC,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEaX,KAAKa,OAAL,EAFb;;AAAA;AAEFC,kBAFE;AAAA;AAAA,mBAGaA,OAAOC,KAAP,CAAa,0BAAb,CAHb;;AAAA;AAGFC,kBAHE;AAIFC,mBAJE,GAIQ,EAAE,WAAYD,MAAD,GAAWA,OAAOE,IAAlB,GAAyB,IAAtC,EAJR;;AAKRP,gBAAIC,MAAJ,CAAW,UAAX,EAAuBK,OAAvB;AACAH,mBAAOK,OAAP;AANQ;AAAA;;AAAA;AAAA;AAAA;;AASRC,oBAAQC,KAAR;AACAV,gBAAIW,IAAJ;;AAVQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GALd;;AAAA;AAAA;AAAA;AAAA,KAkBGb,GAlBH,CAkBO,OAlBP,EAkBgB,UAACc,GAAD,EAAKZ,GAAL;AAAA,SAAaA,IAAIW,IAAJ,CAAS9B,MAAT,CAAb;AAAA,CAlBhB,EAmBGiB,GAnBH,CAmBO,QAnBP,EAmBiB,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcA,IAAIW,IAAJ,CAASE,WAAT,CAAd;AAAA,CAnBjB,EAoBGC,MApBH,CAoBU7B,IApBV,EAoBgB;AAAA,SAAMwB,QAAQM,GAAR,mBAA6B9B,IAA7B,CAAN;AAAA,CApBhB;;AAsBE4B,YAAY,qBAAM;AAChB,MAAIR,SAAS,EAAb;AACA,MAAMW,QAAQ9B,QAAQC,GAAR,CAAY8B,KAAZ,IAAqB,CAAnC;AACA,OAAKC,IAAI,CAAT,EAAYA,IAAIF,KAAhB,EAAwBE,GAAxB,EAA4B;AAC1Bb,cAAUa,IAAI,GAAd;AACD;AACD,SAAOb,MAAP;AACD,CAPD","file":"index.js","sourcesContent":["const cool = require('cool-ascii-faces')\r\nconst express = require('express')\r\nconst path = require('path')\r\nconst PORT = process.env.PORT || 5000\r\nconst { Pool } = require('pg');\r\nconst pool = new Pool({\r\n  connectionString: process.env.DATABASE_URL,\r\n  ssl: true\r\n});\r\n\r\nexpress()\r\n  .use(express.static(path.join(__dirname, 'public')))\r\n  .set('views', path.join(__dirname, 'views'))\r\n  .set('view engine', 'ejs')\r\n  .get('/', (req, res) => res.render('pages/index'))\r\n  .get('/db', async (req,res) => {\r\n    try {\r\n      const client = await pool.connect()\r\n      const result = await client.query('SELECT * FROM test_table');\r\n      const results = { 'results': (result) ? result.rows : null };\r\n      res.render('pages/db', results);\r\n      client.release();\r\n    }\r\n    catch (err){\r\n      console.error(err);\r\n      res.send(err)\r\n    }\r\n  })\r\n  .get('/cool', (rec,res) => res.send(cool()))\r\n  .get('/times', (req, res) => res.send(showTimes()))\r\n  .listen(PORT, () => console.log(`Listening on ${ PORT }`))\r\n\r\n  showTimes = () => {\r\n    let result = ''\r\n    const times = process.env.TIMES || 5\r\n    for (i = 0; i < times;  i++){\r\n      result += i + ' '\r\n    }\r\n    return result;\r\n  }"]}